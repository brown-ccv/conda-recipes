{% set name = "vcversioner" %}
{% set version = "2.16.0.0" %}
{% set hash_type = "sha256" %}
{% set hash_value = "dae60c17a479781f44a4010701833f1829140b1eeccd258762a74974aa06e19b" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python
    - setuptools

about:
  home: https://github.com/habnabit/vcversioner
  license: ISC License (ISCL)
  license_family: OTHER
  license_file: ''
  summary: Use version control tags to discover version numbers
  description: ".. image:: https://travis-ci.org/habnabit/vcversioner.png\n\n===========\nvcversioner\n===========\n\n`Elevator pitch`_: you can write a ``setup.py`` with no version information\nspecified,\
    \ and vcversioner will find a recent, properly-formatted VCS tag and\nextract a version from it.\n\nIt's much more convenient to be able to use your version control system's\ntagging mechanism to derive\
    \ a version number than to have to duplicate that\ninformation all over the place. I eventually ended up copy-pasting the same\ncode into a couple different ``setup.py`` files just to avoid duplicating\n\
    version information. But, copy-pasting is dumb and unit testing ``setup.py``\nfiles is hard. This code got factored out into vcversioner.\n\n\nBasic usage\n-----------\n\nvcversioner installs itself\
    \ as a setuptools hook, which makes its use\nexceedingly simple::\n\n  from setuptools import setup\n\n  setup(\n      # [...]\n      setup_requires=['vcversioner'],\n      vcversioner={},\n  )\n\n\
    The presence of a ``vcversioner`` argument automagically activates vcversioner\nand updates the project's version. The parameter to the ``vcversioner``\nargument can also be a dict of keyword arguments\
    \ which |find_version|\nwill be called with.\n\nTo allow tarballs to be distributed without requiring a ``.git`` (or ``.hg``,\netc.) directory, vcversioner will also write out a file named (by default)\n\
    ``version.txt``. Then, if there is no VCS program or the program is unable to\nfind any version information, vcversioner will read version information from\nthe ``version.txt`` file. However, this file\
    \ needs to be included in a\ndistributed tarball, so the following line should be added to ``MANIFEST.in``::\n\n  include version.txt\n\nThis isn't necessary if ``setup.py`` will always be run from\
    \ a checkout, but\notherwise is essential for vcversioner to know what version to use.\n\nThe name ``version.txt`` also can be changed by specifying the ``version_file``\nparameter. For example::\n\n\
    \  from setuptools import setup\n\n  setup(\n      # [...]\n      setup_requires=['vcversioner'],\n      vcversioner={\n          'version_file': 'custom_version.txt',\n      },\n  )\n\nFor compatibility\
    \ with `semantic versioning`_, ``vcversioner`` will strip\nleading ``'v'``\\ s  from version tags. That is, the tag ``v1.0`` will be\ntreated as if it was ``1.0``.\n\nOther prefixes can be specified\
    \ to be stripped by using the ``strip_prefix``\nargument to vcversioner. For compatibility with ``git-dch``, one could specify\nthe ``strip_prefix`` as ``'debian/'``.\n\n\nNon-hook usage\n--------------\n\
    \nIt's not necessary to depend on vcversioner; while `pip`_ will take care of\ndependencies automatically, sometimes having a self-contained project is\nsimpler. vcversioner is a single file which is\
    \ easy to add to a project. Simply\ncopy the entire ``vcversioner.py`` file adjacent to the existing ``setup.py``\nfile and update the usage slightly::\n\n  from setuptools import setup\n  import vcversioner\n\
    \n  setup(\n      # [...]\n      version=vcversioner.find_version().version,\n  )\n\nThis is necessary because the ``vcversioner`` distutils hook won't be\navailable.\n\n\nVersion modules\n---------------\n\
    \n``setup.py`` isn't the only place that version information gets duplicated. By\ngenerating a version module, the ``__init__.py`` file of a package can import\nversion information. For example, with\
    \ a package named ``spam``::\n\n  from setuptools import setup\n\n  setup(\n      # [...]\n      setup_requires=['vcversioner'],\n      vcversioner={\n          'version_module_paths': ['spam/_version.py'],\n\
    \      },\n  )\n\nThis will generate a ``spam/_version.py`` file that defines ``__version__`` and\n``__revision__``. Then, in ``spam/__init__.py``::\n\n  from spam._version import __version__, __revision__\n\
    \nSince this acts like (and *is*) a regular python module, changing\n``MANIFEST.in`` is not required.\n\n\nCustomizing VCS commands\n------------------------\n\nvcversioner by default tries to detect\
    \ which VCS is being used and picks a\ncommand to run based on that. For git, that is ``git --git-dir %(root)s/.git\ndescribe --tags --long``. For hg, that is ``hg log -R %(root)s -r . --template\n\
    '{latesttag}-{latesttagdistance}-hg{node|short}'``.\n\nAny command should output a string that describes the current commit in the\nformat ``1.0-0-gdeadbeef``. Specifically, that is ``<version number>-<number\
    \ of\ncommits between the current commit and the version tagged commit>-<revision>``.\nThe revision should have a VCS-specific prefix, e.g. ``g`` for git and ``hg``\nfor hg.\n\nHowever, sometimes this\
    \ isn't sufficient. If someone wanted to only use\nannotated tags, the git command could be amended like so::\n\n  from setuptools import setup\n\n  setup(\n      # [...]\n      setup_requires=['vcversioner'],\n\
    \      vcversioner={\n          'vcs_args': ['git', 'describe', '--long'],\n      },\n  )\n\nThe ``vcs_args`` parameter must always be a list of strings, which will not be\ninterpreted by the shell.\
    \ This is the same as what ``subprocess.Popen``\nexpects.\n\nThis argument used to be spelled ``git_args`` until support for multiple VCS\nsystems was added.\n\n\nDevelopment versions\n--------------------\n\
    \nvcversioner can also automatically make a version that corresponds to a commit\nthat isn't itself tagged. Following `PEP 386`_, this is done by adding a\n``.post`` suffix to the version specified\
    \ by a tag on an earlier commit. For\nexample, if the current commit is three revisions past the ``1.0`` tag, the\ncomputed version will be ``1.0.post3``.\n\nThis behavior can be disabled by setting\
    \ the ``include_dev_version`` parameter\nto ``False``. In that case, the aforementioned untagged commit's version would\nbe just ``1.0``.\n\nSince hg requires a commit to make a tag, there's a parameter\n\
    ``decrement_dev_version`` to subtract one from the number of commits after the\nmost recent tag. If the VCS used is detected to be hg (i.e. the revision starts\nwith ``'hg'``) and ``decrement_dev_version``\
    \ is not specified as ``False``,\n``decrement_dev_version`` will be automatically set to ``True``.\n\n\nProject roots\n-------------\n\nIn order to prevent contamination from other source repositories,\
    \ vcversioner\nin the 1.x version series will only look in the project root directory for\nrepositories. The project root defaults to the current working directory, which\nis often the case when running\
    \ setup.py. This can be changed by specifying the\n``root`` parameter. Someone concerned with being able to run setup.py from\ndirectories other than the directory containing setup.py should determine\
    \ the\nproject root from ``__file__`` in setup.py::\n\n  from setuptools import setup\n  import os\n\n  setup(\n      # [...]\n      setup_requires=['vcversioner'],\n      vcversioner={\n          'root':\
    \ os.path.dirname(os.path.abspath(__file__)),\n      },\n  )\n\nTo get the same behavior in the 0.x version series, ``vcs_args`` can be set to\ninclude the ``--git-dir`` flag::\n\n  from setuptools\
    \ import setup\n\n  setup(\n      # [...]\n      setup_requires=['vcversioner'],\n      vcversioner={\n          vcs_args=['git', '--git-dir', '%(root)s/.git', 'describe',\n                    '--tags',\
    \ '--long'],\n      },\n  )\n\nBy default, ``version.txt`` is also read from the project root.\n\n\nSubstitutions\n~~~~~~~~~~~~~\n\nAs seen above, *root*, *version_file*, and *vcs_args* each support\
    \ some\nsubstitutions:\n\n``%(root)s``\n  The value provided for *root*. This is not available for the *root*\n  parameter itself.\n\n``%(pwd)s``\n  The current working directory.\n\n``/`` will automatically\
    \ be translated into the correct path separator for the\ncurrent platform, such as ``:`` or ``\\``.\n\n\nSphinx documentation\n--------------------\n\n`Sphinx`_ documentation is yet another place where\
    \ version numbers get\nduplicated. Fortunately, since sphinx configuration is python code, vcversioner\ncan be used there too. Assuming vcversioner is installed system-wide, this is\nquite easy. Since\
    \ Sphinx is typically run with the current working directory as\n``<your project root>/docs``, it's necessary to tell vcversioner where the\nproject root is. Simply change your ``conf.py`` to include::\n\
    \n  import vcversioner\n  version = release = vcversioner.find_version(root='..').version\n\nThis assumes that your project root is the parent directory of the current\nworking directory. A slightly\
    \ longer version which is a little more robust\nwould be::\n\n  import vcversioner, os\n  version = release = vcversioner.find_version(\n      root=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))).version\n\
    \nThis version is more robust because it finds the project root not relative to\nthe current working directory but instead relative to the ``conf.py`` file.\n\nIf vcversioner is bundled with your project\
    \ instead of relying on it being\ninstalled, you might have to add the following to your ``conf.py`` before\n``import vcversioner``::\n\n  import sys, os\n  sys.path.insert(0, os.path.abspath('..'))\n\
    \nThis line, or something with the same effect, is sometimes already present when\nusing the sphinx ``autodoc`` extension.\n\n\nRead the Docs\n~~~~~~~~~~~~~\n\nUsing vcversioner is even possible when\
    \ building documentation on `Read the\nDocs`_. If vcversioner is bundled with your project, nothing further needs to\nbe done. Otherwise, you need to tell Read the Docs to install vcversioner\nbefore\
    \ it builds the documentation. This means using a ``requirements.txt``\nfile.\n\nIf your project is already set up to install dependencies with a\n``requirements.txt`` file, add ``vcversioner`` to it.\
    \ Otherwise, create a\n``requirements.txt`` file. Assuming your documentation is in a ``docs``\nsubdirectory of the main project directory, create ``docs/requirements.txt``\ncontaining a ``vcversioner``\
    \ line.\n\nThen, make the following changes to your project's configuration: (Project\nconfiguration is edited at e.g.\nhttps://readthedocs.org/dashboard/vcversioner/edit/)\n\n- Check the checkbox under\
    \ **Use virtualenv**.\n- If there was no ``requirements.txt`` previously, set the **Requirements\n  file** to the newly-created one, e.g. ``docs/requirements.txt``.\n\n\n.. _Elevator pitch: http://en.wikipedia.org/wiki/Elevator_pitch\n\
    .. _pip: https://pypi.python.org/pypi/pip\n.. _PEP 386: http://www.python.org/dev/peps/pep-0386/\n.. _Sphinx: http://sphinx-doc.org\n.. _Read the Docs: https://readthedocs.org/\n.. _semantic versioning:\
    \ http://semver.org/\n\n.. |find_version| replace:: ``find_version``"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
