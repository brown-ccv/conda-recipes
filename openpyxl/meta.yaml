package:
  name: openpyxl
  version: "2.5.0"

source:
  fn: openpyxl-2.5.0.tar.gz
  url: https://pypi.python.org/packages/62/5d/82b7989dee698891ae3545b157fbbb1b345ec7f78be8167849156c71e71c/openpyxl-2.5.0.tar.gz
  md5: 8d1f5d18edb1d1da502078b575e9f42f
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # noarch_python: True
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - openpyxl = openpyxl:main
    #
    # Would create an entry point called openpyxl that calls openpyxl.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - jdcal ==1.3
    - et_xmlfile ==1.0.1

  run:
    - python
    - jdcal ==1.3
    - et_xmlfile ==1.0.1

test:
  # Python imports
  imports:
    - openpyxl
    - openpyxl.cell
    - openpyxl.chart
    - openpyxl.chartsheet
    - openpyxl.comments
    - openpyxl.compat
    - openpyxl.descriptors
    - openpyxl.drawing
    - openpyxl.formatting
    - openpyxl.formula
    - openpyxl.packaging
    - openpyxl.pivot
    - openpyxl.reader
    - openpyxl.styles
    - openpyxl.utils
    - openpyxl.workbook
    - openpyxl.workbook.external_link
    - openpyxl.worksheet
    - openpyxl.writer
    - openpyxl.xml

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://openpyxl.readthedocs.io
  license: MIT License
  summary: 'A Python library to read/write Excel 2010 xlsx/xlsm files'
  license_family: MIT

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
